banco de dados:

registrosChuva
[{
"sensor": 12345,
"dataHora": "2021-05-05 12:18",
"statusChauva": true
},{
"sensor": 12345,
"dataHora": "2021-05-05 12:23",
"statusChauva": true
},{
"sensor": 12345,
"dataHora": "2021-05-05 12:28",
"statusChauva": false
},{
"sensor": 12345,
"dataHora": "2021-05-05 12:28",
"statusChauva": false
},{
"sensor": 12345,
"dataHora": "2021-05-05 12:28",
"statusChuva": true
}]

sensores:
[{
    "ID": 12345,
    "coordenadas": "29° 55' 04''S 51° 11' 01''W",
},{
    "ID": 234567,
    "coordenadas": "29° 55' 04''S 51° 11' 01''W",
},{
    "ID": 345678,
    "coordenadas": "29° 55' 04''S 51° 11' 01''W",
}]


sensor na janela que que envia dois tipos de requisições
- começou a chover agora
- parou de chover agora

o sensor tem um ID único

o sensor vai fazezr uma requisição HTTP  POST /registro-chuva
body:
{
    "ID": 12345,
    "statusChuva": true
}
OU
{
    "ID": 12345,
    "statusChuva": false
}

Callback:
const funcao1 = function(erro){
    //código a ser executado ao terminar o processo demorado
    if(erro){
        //deu erro na execução do código demora
    }  else {
        //deu tudo certo lá
    }
}

const funcao2(callback){
    try {
        // executar um processo demorado
        callback();
    } catch (erro) {
        callback(erro);
    }
}


funcao2(funcao1)

funcao2(function(){
    //código a ser executado ao terminar o processo demorado
})

...

//registroChuvaController.js
app.post('/registro-chuva', (req, res) =>{
    const dadosSensor = req.body;

    sensorDao(dadosSensor.ID, funcation(erro, sensor){
        if(erro){
            res.send(500);
        } else {
                    
            const registroChuva = {
                "sensor": dadosSensor.ID,
                "dataHora": new Date(),
                "coordenadas": sensor.coordenadas,
                "statusChuva": dadosSensor.statusChuva
            }
            
            registroChuvaDao.save(registroChuva, function(erro){
                if(erro) {
                    res.send(500)
                } else {
                    res.send(200);
                }
            })

        }
    })
    
});

app.get('/registros-chuva', (req, res) =>{
    
    registroChuvaDao.list(function(err, registros){
                if(erro) {
                    res.send(500)
                } else {
                    res.json(registros); // status 200
                }
            })

        }
    })
    
});


//registroChuvaDao.js
const registrosChuva = []

exports.save = function(registroChuva, callback) {

     try {
        // criar uma conexão com o banco de dados
        // fazer um insert do regitroChuva no banco de dados
        registrosChuva.push(registroChuva); // simulação de um banco de dados
        callback();
    } catch (erro) {
        callback(erro);
    }
    callback();
}


exports.list = function(callback) {

     try {
        // criar uma conexão com o banco de dados
        // fazer uma consulta de todos os registros no banco de dados
        callback(null, registrosChuva);
    } catch (erro) {
        callback(erro);
    }
    callback();
}

